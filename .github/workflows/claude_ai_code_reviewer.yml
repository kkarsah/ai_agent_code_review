name: Claude AI Code Reviewer
on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  ai-code-review:
    name: Claude AI Code Reviewer
    runs-on: ubuntu-latest
    
    # Skip draft PRs and bot PRs
    if: |
      github.event.pull_request.draft == false && 
      !contains(github.event.pull_request.title, '[skip-ai-review]') &&
      github.actor != 'dependabot[bot]'
    
    permissions:
      # Essential permissions for the action to work
      contents: read          # Read repository contents
      pull-requests: write    # Comment on PRs
      issues: write          # Create issue comments
      checks: write          # Create check runs
      actions: read          # Read workflow information
      metadata: read         # Read repository metadata
      repository-projects: read  # Read project information
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Use default GITHUB_TOKEN which should have proper permissions
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install anthropic requests python-dotenv

    - name: Create Claude AI Code Reviewer
      run: |
        cat > claude_pr_reviewer.py << 'EOF'
        import os
        import json
        import requests
        import sys
        import re
        from typing import Dict, List, Optional, Tuple
        from dataclasses import dataclass
        from datetime import datetime
        import time
        import anthropic

        @dataclass
        class ReviewComment:
            file_path: str
            line_number: Optional[int]
            comment: str
            severity: str  # 'error', 'warning', 'info', 'suggestion'
            category: str  # 'security', 'performance', 'style', 'logic', 'maintainability'

        @dataclass
        class PRFile:
            filename: str
            additions: int
            deletions: int
            patch: str
            status: str
            extension: str
            content: str

        class ClaudeCodeReviewer:
            def __init__(self, github_token: str, anthropic_api_key: str):
                self.github_token = github_token
                self.anthropic_client = anthropic.Anthropic(api_key=anthropic_api_key)
                self.github_headers = {
                    'Authorization': f'token {github_token}',
                    'Accept': 'application/vnd.github.v3+json',
                    'X-GitHub-Api-Version': '2022-11-28',
                    'User-Agent': 'Claude-AI-Code-Reviewer-Action/1.0'
                }
                
                # File extensions to review
                self.reviewable_extensions = {
                    '.py', '.js', '.ts', '.jsx', '.tsx', '.java', '.c', '.cpp', '.cs', 
                    '.php', '.rb', '.go', '.rs', '.swift', '.kt', '.scala', '.r', 
                    '.sql', '.yaml', '.yml', '.json', '.xml', '.html', '.css', '.scss',
                    '.sh', '.bash', '.ps1', '.dockerfile', '.tf', '.hcl', '.md'
                }

            def _make_api_request(self, url: str, method: str = 'GET', data: Dict = None) -> Dict:
                """Make API request with retry logic and better error handling"""
                max_retries = 3
                retry_delay = 2
                
                for attempt in range(max_retries):
                    try:
                        if method == 'GET':
                            response = requests.get(url, headers=self.github_headers, timeout=30)
                        elif method == 'POST':
                            response = requests.post(url, headers=self.github_headers, json=data, timeout=30)
                        else:
                            raise ValueError(f"Unsupported HTTP method: {method}")
                        
                        # Check for rate limiting
                        if response.status_code == 403 and 'rate limit' in response.text.lower():
                            reset_time = int(response.headers.get('X-RateLimit-Reset', time.time() + 60))
                            wait_time = max(reset_time - int(time.time()), 60)
                            print(f"‚è≥ Rate limited. Waiting {wait_time} seconds...")
                            time.sleep(wait_time)
                            continue
                        
                        response.raise_for_status()
                        return response.json() if method == 'GET' else True
                        
                    except requests.exceptions.HTTPError as e:
                        if e.response.status_code == 403:
                            print(f"‚ùå Permission denied (403). Check if GITHUB_TOKEN has proper permissions:")
                            print(f"   Required: contents:read, pull-requests:write, issues:write")
                            print(f"   URL: {url}")
                            print(f"   Response: {e.response.text[:200]}")
                        elif e.response.status_code == 404:
                            print(f"‚ùå Resource not found (404): {url}")
                        else:
                            print(f"‚ùå HTTP Error {e.response.status_code}: {e.response.text[:200]}")
                        
                        if attempt == max_retries - 1:
                            raise
                        print(f"üîÑ Retrying in {retry_delay} seconds... (attempt {attempt + 1}/{max_retries})")
                        time.sleep(retry_delay)
                        retry_delay *= 2
                        
                    except requests.exceptions.RequestException as e:
                        print(f"‚ùå Request error: {e}")
                        if attempt == max_retries - 1:
                            raise
                        print(f"üîÑ Retrying in {retry_delay} seconds... (attempt {attempt + 1}/{max_retries})")
                        time.sleep(retry_delay)
                        retry_delay *= 2

            def get_pr_info(self, repo_owner: str, repo_name: str, pr_number: int) -> Dict:
                """Get PR information with error handling"""
                url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls/{pr_number}"
                print(f"üîç Fetching PR info from: {url}")
                return self._make_api_request(url)

            def get_file_content(self, repo_owner: str, repo_name: str, file_path: str, ref: str) -> str:
                """Get file content from GitHub API"""
                url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{file_path}?ref={ref}"
                try:
                    response = self._make_api_request(url)
                    if response.get('encoding') == 'base64':
                        import base64
                        return base64.b64decode(response['content']).decode('utf-8')
                    return response.get('content', '')
                except Exception as e:
                    print(f"‚ö†Ô∏è Could not fetch content for {file_path}: {e}")
                    return ""

            def get_pr_files(self, repo_owner: str, repo_name: str, pr_number: int, pr_info: Dict) -> List[PRFile]:
                """Fetch files changed in a pull request with robust error handling"""
                url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls/{pr_number}/files"
                print(f"üìÅ Fetching PR files from: {url}")
                
                try:
                    # Handle pagination for large PRs
                    all_files = []
                    page = 1
                    per_page = 100
                    
                    while True:
                        paginated_url = f"{url}?page={page}&per_page={per_page}"
                        files_data = self._make_api_request(paginated_url)
                        
                        if not files_data:
                            break
                            
                        all_files.extend(files_data)
                        
                        # Check if we got a full page (more pages might exist)
                        if len(files_data) < per_page:
                            break
                            
                        page += 1
                        
                        # Safety limit to prevent infinite loops
                        if page > 50:
                            print("‚ö†Ô∏è Reached pagination limit (50 pages)")
                            break
                    
                    print(f"üìä Found {len(all_files)} total files in PR")
                    
                    # Process files
                    reviewable_files = []
                    head_sha = pr_info['head']['sha']
                    
                    for file_data in all_files:
                        filename = file_data['filename']
                        extension = os.path.splitext(filename)[1].lower()
                        
                        # Skip non-reviewable files
                        if extension not in self.reviewable_extensions:
                            print(f"‚è≠Ô∏è Skipping non-reviewable file: {filename}")
                            continue
                        
                        # Skip very large files (>1500 changes)
                        total_changes = file_data.get('additions', 0) + file_data.get('deletions', 0)
                        if total_changes > 1500:
                            print(f"‚è≠Ô∏è Skipping large file: {filename} ({total_changes} changes)")
                            continue
                        
                        # Skip generated/vendor files
                        if self._is_generated_file(filename):
                            print(f"‚è≠Ô∏è Skipping generated file: {filename}")
                            continue
                        
                        # Get full file content for better analysis
                        file_content = ""
                        if file_data.get('status') != 'removed':
                            file_content = self.get_file_content(repo_owner, repo_name, filename, head_sha)
                            
                        reviewable_files.append(PRFile(
                            filename=filename,
                            additions=file_data.get('additions', 0),
                            deletions=file_data.get('deletions', 0),
                            patch=file_data.get('patch', ''),
                            status=file_data.get('status', 'modified'),
                            extension=extension,
                            content=file_content
                        ))
                    
                    print(f"‚úÖ {len(reviewable_files)} files selected for review")
                    return reviewable_files
                    
                except Exception as e:
                    print(f"‚ùå Error fetching PR files: {e}")
                    raise

            def _is_generated_file(self, filename: str) -> bool:
                """Check if file is likely generated or should be skipped"""
                skip_patterns = [
                    'node_modules/', 'vendor/', '.git/', 'dist/', 'build/', 
                    '__pycache__/', '.pytest_cache/', 'coverage/', '.venv/',
                    'package-lock.json', 'yarn.lock', 'poetry.lock', 'Pipfile.lock',
                    '.min.js', '.min.css', 'bundle.js', 'bundle.css', '.map',
                    'migrations/', 'locale/', 'i18n/', 'translations/',
                    '.generated', 'auto_generated', 'codegen'
                ]
                
                filename_lower = filename.lower()
                return any(pattern in filename_lower for pattern in skip_patterns)

            def analyze_code_with_claude(self, pr_file: PRFile, pr_context: str) -> List[ReviewComment]:
                """Analyze code using Claude AI"""
                print(f"üß† Analyzing {pr_file.filename} with Claude...")
                
                # Prepare the prompt for Claude
                prompt = f"""You are an expert code reviewer. Please review this code change and provide constructive feedback.

**File:** {pr_file.filename}
**Status:** {pr_file.status}
**Changes:** +{pr_file.additions} -{pr_file.deletions}

**PR Context:** {pr_context}

**File Content (if available):**
```
{pr_file.content[:2000] if pr_file.content else 'Full content not available'}
```

**Changes (Git Diff):**
```diff
{pr_file.patch}
```

Please analyze this code and provide feedback in the following JSON format:
```json
{{
  "comments": [
    {{
      "line_number": null,
      "comment": "Your detailed review comment here",
      "severity": "error|warning|info|suggestion",
      "category": "security|performance|style|logic|maintainability"
    }}
  ]
}}
```

Focus on:
1. **Security vulnerabilities** (SQL injection, XSS, hardcoded secrets, etc.)
2. **Performance issues** (inefficient algorithms, memory leaks, etc.)
3. **Code quality** (readability, maintainability, best practices)
4. **Logic errors** (potential bugs, edge cases)
5. **Style consistency** (naming conventions, formatting)

Only report significant issues that would benefit from developer attention. Provide specific, actionable feedback.
"""

                try:
                    response = self.anthropic_client.messages.create(
                        model="claude-3-haiku-20240307",
                        max_tokens=2000,
                        temperature=0.1,
                        messages=[{
                            "role": "user",
                            "content": prompt
                        }]
                    )
                    
                    # Parse Claude's response
                    response_text = response.content[0].text
                    
                    # Try to extract JSON from the response
                    json_match = re.search(r'```json\s*(\{.*?\})\s*```', response_text, re.DOTALL)
                    if json_match:
                        json_str = json_match.group(1)
                        try:
                            result = json.loads(json_str)
                            comments = []
                            
                            for comment_data in result.get('comments', []):
                                comments.append(ReviewComment(
                                    file_path=pr_file.filename,
                                    line_number=comment_data.get('line_number'),
                                    comment=comment_data.get('comment', ''),
                                    severity=comment_data.get('severity', 'info'),
                                    category=comment_data.get('category', 'style')
                                ))
                            
                            print(f"‚úÖ Claude found {len(comments)} issues in {pr_file.filename}")
                            return comments
                            
                        except json.JSONDecodeError as e:
                            print(f"‚ö†Ô∏è Failed to parse Claude's JSON response: {e}")
                            # Fallback: create a general comment with the response
                            return [ReviewComment(
                                file_path=pr_file.filename,
                                line_number=None,
                                comment=f"Claude AI Analysis:\n{response_text[:500]}...",
                                severity='info',
                                category='general'
                            )]
                    else:
                        print("‚ö†Ô∏è No JSON found in Claude's response")
                        return []
                        
                except Exception as e:
                    print(f"‚ùå Error calling Claude API: {e}")
                    return []

            def create_review_summary(self, pr_info: Dict, all_comments: List[ReviewComment], files_reviewed: int) -> str:
                """Create comprehensive review summary"""
                
                # Group comments by severity
                errors = [c for c in all_comments if c.severity == 'error']
                warnings = [c for c in all_comments if c.severity == 'warning']
                suggestions = [c for c in all_comments if c.severity in ['info', 'suggestion']]
                
                # Create summary header
                summary = f"## ü§ñ Claude AI Code Review\n\n"
                summary += f"**üìä Review Summary**\n"
                summary += f"- **Files reviewed:** {files_reviewed}\n"
                summary += f"- **Total changes:** +{pr_info.get('additions', 0)} -{pr_info.get('deletions', 0)}\n"
                summary += f"- **Issues found:** {len(errors)} errors, {len(warnings)} warnings, {len(suggestions)} suggestions\n\n"
                
                if not all_comments:
                    summary += "### ‚úÖ No Issues Found!\n\n"
                    summary += "Claude AI has reviewed the code changes and found no significant issues. The code looks good to merge! üéâ\n\n"
                else:
                    # Show critical issues first
                    if errors:
                        summary += "### üö® Critical Issues (Must Fix)\n\n"
                        for i, comment in enumerate(errors[:8], 1):  # Limit to prevent spam
                            summary += f"**{i}. {comment.file_path}**"
                            if comment.line_number:
                                summary += f" (line {comment.line_number})"
                            summary += f"\n{comment.comment}\n\n"
                        
                        if len(errors) > 8:
                            summary += f"*... and {len(errors) - 8} more critical issues*\n\n"
                    
                    # Show warnings
                    if warnings:
                        summary += "### ‚ö†Ô∏è Warnings (Should Fix)\n\n"
                        for i, comment in enumerate(warnings[:6], 1):
                            summary += f"**{i}. {comment.file_path}**"
                            if comment.line_number:
                                summary += f" (line {comment.line_number})"
                            summary += f"\n{comment.comment}\n\n"
                        
                        if len(warnings) > 6:
                            summary += f"*... and {len(warnings) - 6} more warnings*\n\n"
                    
                    # Show top suggestions
                    if suggestions:
                        summary += "### üí° Suggestions (Consider)\n\n"
                        for i, comment in enumerate(suggestions[:4], 1):
                            summary += f"**{i}. {comment.file_path}**"
                            if comment.line_number:
                                summary += f" (line {comment.line_number})"
                            summary += f"\n{comment.comment}\n\n"
                        
                        if len(suggestions) > 4:
                            summary += f"*... and {len(suggestions) - 4} more suggestions*\n\n"
                
                # Add category breakdown
                if all_comments:
                    categories = {}
                    for comment in all_comments:
                        categories[comment.category] = categories.get(comment.category, 0) + 1
                    
                    summary += "### üìà Issues by Category\n\n"
                    category_icons = {
                        'security': 'üîí',
                        'performance': '‚ö°',
                        'style': 'üé®',
                        'logic': 'üß†',
                        'maintainability': 'üîß',
                        'general': 'üìù'
                    }
                    
                    for cat, count in sorted(categories.items(), key=lambda x: x[1], reverse=True):
                        icon = category_icons.get(cat, 'üìù')
                        summary += f"- {icon} **{cat.title()}**: {count} issue{'s' if count != 1 else ''}\n"
                    
                    summary += "\n"
                
                # Footer
                summary += "---\n\n"
                summary += "üß† *This review was generated by Claude AI (Anthropic). The analysis considers security, performance, maintainability, and best practices.*\n\n"
                summary += "üí° *Add `[skip-ai-review]` to your PR title to skip automated reviews.*\n\n"
                summary += f"‚è∞ *Generated at {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*"
                
                return summary

            def post_pr_comment(self, repo_owner: str, repo_name: str, pr_number: int, comment: str):
                """Post comment on PR with error handling"""
                url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{pr_number}/comments"
                print(f"üí¨ Posting comment to: {url}")
                
                try:
                    result = self._make_api_request(url, method='POST', data={"body": comment})
                    print("‚úÖ Review comment posted successfully")
                    return True
                    
                except Exception as e:
                    print(f"‚ùå Failed to post comment: {e}")
                    return False

            def review_pull_request(self, repo_owner: str, repo_name: str, pr_number: int):
                """Main review orchestration with comprehensive error handling"""
                print(f"üöÄ Starting Claude AI code review")
                print(f"üìç Repository: {repo_owner}/{repo_name}")
                print(f"üîç Pull Request: #{pr_number}")
                
                try:
                    # Get PR information
                    print("\nüìã Fetching PR information...")
                    pr_info = self.get_pr_info(repo_owner, repo_name, pr_number)
                    print(f"‚úÖ PR Info: '{pr_info['title']}'")
                    print(f"üë§ Author: {pr_info['user']['login']}")
                    
                    # Create PR context for Claude
                    pr_context = f"Title: {pr_info['title']}\nDescription: {pr_info.get('body', 'No description provided')[:500]}"
                    
                    # Get changed files
                    print("\nüìÅ Fetching changed files...")
                    pr_files = self.get_pr_files(repo_owner, repo_name, pr_number, pr_info)
                    
                    if not pr_files:
                        print("‚ÑπÔ∏è No reviewable files found - posting notification")
                        no_files_msg = ("ü§ñ **Claude AI Code Review**\n\n"
                                      "No reviewable code files found in this PR. "
                                      "Claude AI supports common programming languages and configuration files.\n\n"
                                      f"*Generated at {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*")
                        self.post_pr_comment(repo_owner, repo_name, pr_number, no_files_msg)
                        return
                    
                    # Analyze files with Claude
                    print(f"\nüß† Analyzing {len(pr_files)} files with Claude AI...")
                    all_comments = []
                    
                    for i, pr_file in enumerate(pr_files, 1):
                        if pr_file.status == 'removed':
                            print(f"   [{i}/{len(pr_files)}] ‚è≠Ô∏è Skipping removed file: {pr_file.filename}")
                            continue
                        
                        print(f"   [{i}/{len(pr_files)}] üß† Analyzing: {pr_file.filename}")
                        
                        try:
                            comments = self.analyze_code_with_claude(pr_file, pr_context)
                            all_comments.extend(comments)
                            print(f"   ‚îî‚îÄ Found {len(comments)} issues")
                            
                            # Add small delay to respect API rate limits
                            time.sleep(1)
                            
                        except Exception as e:
                            print(f"   ‚îî‚îÄ ‚ö†Ô∏è Error analyzing {pr_file.filename}: {e}")
                            continue
                    
                    # Generate and post review
                    print(f"\nüìù Generating review summary...")
                    review_summary = self.create_review_summary(pr_info, all_comments, len(pr_files))
                    
                    print(f"üí¨ Posting review comment...")
                    success = self.post_pr_comment(repo_owner, repo_name, pr_number, review_summary)
                    
                    if success:
                        print(f"üéâ Claude AI review completed successfully!")
                        print(f"üìä Final stats: {len(all_comments)} total issues found across {len(pr_files)} files")
                    else:
                        print("‚ö†Ô∏è Review analysis completed but failed to post comment")
                    
                except Exception as e:
                    error_msg = f"Unexpected error during PR review: {str(e)}"
                    print(f"üí• {error_msg}")
                    
                    # Try to post error comment
                    try:
                        error_comment = (f"ü§ñ **Claude AI Review Error**\n\n"
                                       f"The automated code review encountered an error:\n\n"
                                       f"```\n{error_msg}\n```\n\n"
                                       f"Please check the [workflow logs]({os.getenv('GITHUB_SERVER_URL', 'https://github.com')}"
                                       f"/{repo_owner}/{repo_name}/actions) for more details.\n\n"
                                       f"*You can re-run the review by closing and reopening this PR.*")
                        self.post_pr_comment(repo_owner, repo_name, pr_number, error_comment)
                    except:
                        print("‚ùå Could not post error comment")
                    
                    sys.exit(1)

        def main():
            """Main entry point with environment validation"""
            print("üß† Claude AI Code Reviewer Starting...")
            
            # Validate environment
            github_token = os.getenv('CUSTOM_GITHUB_TOKEN')
            anthropic_api_key = os.getenv('ANTHROPIC_API_KEY')
            pr_number = os.getenv('PR_NUMBER')
            repo_owner = os.getenv('REPO_OWNER')
            repo_name = os.getenv('REPO_NAME')
            
            print(f"üîß Environment check:")
            print(f"   - GITHUB_TOKEN: {'‚úÖ Set' if github_token else '‚ùå Missing'}")
            print(f"   - ANTHROPIC_API_KEY: {'‚úÖ Set' if anthropic_api_key else '‚ùå Missing'}")
            print(f"   - PR_NUMBER: {pr_number or '‚ùå Missing'}")
            print(f"   - REPO_OWNER: {repo_owner or '‚ùå Missing'}")
            print(f"   - REPO_NAME: {repo_name or '‚ùå Missing'}")
            
            if not all([github_token, anthropic_api_key, pr_number, repo_owner, repo_name]):
                print("\n‚ùå Missing required environment variables!")
                print("Make sure GITHUB_TOKEN, ANTHROPIC_API_KEY, PR_NUMBER, REPO_OWNER, and REPO_NAME are set.")
                sys.exit(1)
            
            try:
                pr_number = int(pr_number)
            except ValueError:
                print(f"‚ùå Invalid PR_NUMBER: {pr_number}")
                sys.exit(1)
            
            # Initialize and run reviewer
            print(f"\nüöÄ Initializing Claude AI Code Reviewer...")
            reviewer = ClaudeCodeReviewer(github_token, anthropic_api_key)
            reviewer.review_pull_request(repo_owner, repo_name, pr_number)

        if __name__ == "__main__":
            main()
        EOF

    - name: Run Claude AI Code Review
      env:
        GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN}}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        python claude_pr_reviewer.py

    - name: Add completion reaction
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              content: 'robot'
            });
            console.log('‚úÖ Added robot reaction to PR');
          } catch (error) {
            console.log('‚ö†Ô∏è Could not add reaction:', error.message);
          }