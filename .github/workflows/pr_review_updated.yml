
name: AI Code Review (Advanced)
on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ai-review-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  prepare:
    name: Prepare Review
    runs-on: ubuntu-latest
    outputs:
      should-review: ${{ steps.check.outputs.should-review }}
      files-changed: ${{ steps.changes.outputs.files }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check if review needed
      id: check
      run: |
        # Skip if PR is in draft
        if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
          echo "should-review=false" >> $GITHUB_OUTPUT
          echo "Skipping draft PR"
        else
          echo "should-review=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Get changed files
      id: changes
      run: |
        # Get list of changed files
        gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files \
          --jq '[.[] | select(.status != "removed") | .filename] | @json' > files.json
        echo "files=$(cat files.json)" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ai-review:
    name: AI Review
    needs: prepare
    if: needs.prepare.outputs.should-review == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests
    
    - name: Run AI Review
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
        CHANGED_FILES: ${{ needs.prepare.outputs.files-changed }}
      run: |
        cat > pr_reviewer_action.py << 'EOF'
        import os
        import json
        import requests
        import sys
        from typing import Dict, List, Optional
        from dataclasses import dataclass

        @dataclass
        class PRFile:
            filename: str
            additions: int
            deletions: int
            patch: str
            status: str

        class GitHubPRReviewer:
            def __init__(self, github_token: str):
                self.github_token = github_token
                self.github_headers = {
                    'Authorization': f'token {github_token}',
                    'Accept': 'application/vnd.github.v3+json'
                }
                self.copilot_headers = {
                    'Authorization': f'token {github_token}',
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                }
            
            def get_pr_files(self, repo_owner: str, repo_name: str, pr_number: int) -> List[PRFile]:
                """Fetch files changed in a pull request"""
                url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls/{pr_number}/files"
                response = requests.get(url, headers=self.github_headers)
                response.raise_for_status()
                
                files = []
                for file_data in response.json():
                    # Skip binary files and very large files
                    if file_data.get('additions', 0) + file_data.get('deletions', 0) > 500:
                        print(f"Skipping large file: {file_data['filename']}")
                        continue
                        
                    files.append(PRFile(
                        filename=file_data['filename'],
                        additions=file_data['additions'],
                        deletions=file_data['deletions'],
                        patch=file_data.get('patch', ''),
                        status=file_data['status']
                    ))
                return files
            
            def analyze_code_with_copilot(self, file_content: str, filename: str) -> List[Dict]:
                """Use GitHub Copilot to analyze code and generate review comments"""
                
                system_prompt = """You are an expert code reviewer. Analyze the provided code changes and provide constructive feedback focusing on:
        1. Code quality and best practices
        2. Potential bugs or security issues
        3. Performance considerations
        4. Code style and maintainability
        5. Logic errors or edge cases

        Provide specific, actionable feedback. If code looks good, mention what's well done.
        Return your response as a JSON array of objects with 'comment', 'severity' ('info'/'warning'/'error'), and 'line_context' fields."""

                code_context = f"File: {filename}\nCode changes (diff format):\n{file_content}"

                try:
                    # Try GitHub Copilot API first
                    url = "https://api.github.com/copilot/chat/completions"
                    
                    payload = {
                        "messages": [
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": code_context}
                        ],
                        "model": "gpt-4o",
                        "temperature": 0.1,
                        "max_tokens": 1500
                    }
                    
                    response = requests.post(url, headers=self.copilot_headers, json=payload)
                    
                    if response.status_code == 200:
                        response_data = response.json()
                        ai_feedback = response_data['choices'][0]['message']['content']
                        
                        try:
                            return json.loads(ai_feedback)
                        except json.JSONDecodeError:
                            return [{
                                "comment": ai_feedback,
                                "severity": "info",
                                "line_context": "general"
                            }]
                    else:
                        print(f"Copilot API error: {response.status_code}")
                        return self._fallback_analysis(file_content, filename)
                        
                except Exception as e:
                    print(f"Error calling Copilot API: {e}")
                    return self._fallback_analysis(file_content, filename)
            
            def _fallback_analysis(self, file_content: str, filename: str) -> List[Dict]:
                """Fallback analysis using pattern matching"""
                issues = []
                lines = file_content.split('\n')
                
                for line in lines:
                    if line.startswith('+'):
                        line_content = line[1:].strip()
                        
                        # Basic checks
                        if any(keyword in line_content.lower() for keyword in ['todo', 'fixme', 'hack']):
                            issues.append({
                                "comment": f"Found TODO/FIXME/HACK comment: Consider addressing before merge",
                                "severity": "warning",
                                "line_context": line_content
                            })
                        
                        if any(debug in line_content for debug in ['console.log', 'print(', 'debugger', 'var_dump']):
                            issues.append({
                                "comment": "Debug statement found - consider removing before merge",
                                "severity": "warning",
                                "line_context": line_content
                            })
                        
                        if len(line_content) > 120:
                            issues.append({
                                "comment": f"Long line ({len(line_content)} chars) - consider refactoring for readability",
                                "severity": "info",
                                "line_context": line_content[:50] + "..."
                            })
                
                if not issues:
                    issues.append({
                        "comment": f"✅ Code changes in {filename} look good!",
                        "severity": "info",
                        "line_context": "general"
                    })
                
                return issues
            
            def post_pr_comment(self, repo_owner: str, repo_name: str, pr_number: int, comment: str):
                """Post a general comment on the PR"""
                url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{pr_number}/comments"
                
                data = {"body": comment}
                response = requests.post(url, headers=self.github_headers, json=data)
                
                if response.status_code == 201:
                    print("✅ Posted PR comment successfully")
                else:
                    print(f"❌ Failed to post comment: {response.status_code}")
            
            def review_pull_request(self, repo_owner: str, repo_name: str, pr_number: int):
                """Main method to review a pull request"""
                print(f"🔍 Starting AI review of PR #{pr_number} in {repo_owner}/{repo_name}")
                
                try:
                    # Get PR files
                    pr_files = self.get_pr_files(repo_owner, repo_name, pr_number)
                    print(f"📁 Found {len(pr_files)} files to review")
                    
                    if not pr_files:
                        print("ℹ️ No files to review")
                        return
                    
                    all_feedback = []
                    
                    for pr_file in pr_files:
                        if pr_file.status == 'removed':
                            continue
                        
                        print(f"   Analyzing {pr_file.filename}...")
                        feedback = self.analyze_code_with_copilot(pr_file.patch, pr_file.filename)
                        all_feedback.extend([(pr_file.filename, f) for f in feedback])
                    
                    # Generate summary comment
                    self._post_review_summary(repo_owner, repo_name, pr_number, all_feedback)
                    
                except Exception as e:
                    error_msg = f"❌ Error during PR review: {str(e)}"
                    print(error_msg)
                    self.post_pr_comment(repo_owner, repo_name, pr_number, 
                                       f"🤖 **AI Review Error**\n\n{error_msg}")
            
            def _post_review_summary(self, repo_owner: str, repo_name: str, pr_number: int, all_feedback: List):
                """Post a comprehensive review summary"""
                
                if not all_feedback:
                    comment = "🤖 **AI Code Review Complete**\n\n✅ No issues found in this PR. Code looks good!"
                else:
                    # Group feedback by severity
                    errors = []
                    warnings = []
                    info = []
                    
                    for filename, feedback in all_feedback:
                        if feedback['severity'] == 'error':
                            errors.append((filename, feedback))
                        elif feedback['severity'] == 'warning':
                            warnings.append((filename, feedback))
                        else:
                            info.append((filename, feedback))
                    
                    comment = "🤖 **AI Code Review Complete**\n\n"
                    
                    if errors:
                        comment += "## ❌ Issues Found\n"
                        for filename, feedback in errors:
                            comment += f"**{filename}**: {feedback['comment']}\n\n"
                    
                    if warnings:
                        comment += "## ⚠️ Warnings\n"
                        for filename, feedback in warnings:
                            comment += f"**{filename}**: {feedback['comment']}\n\n"
                    
                    if info:
                        comment += "## ℹ️ Suggestions\n"
                        for filename, feedback in info:
                            comment += f"**{filename}**: {feedback['comment']}\n\n"
                    
                    comment += f"\n---\n*Reviewed {len(set(f[0] for f in all_feedback))} files with {len(all_feedback)} total comments*"
                
                self.post_pr_comment(repo_owner, repo_name, pr_number, comment)

        def main():
            github_token = os.getenv('GITHUB_TOKEN')
            pr_number = int(os.getenv('PR_NUMBER'))
            repo_owner = os.getenv('REPO_OWNER')
            repo_name = os.getenv('REPO_NAME')
            
            if not all([github_token, pr_number, repo_owner, repo_name]):
                print("❌ Missing required environment variables")
                sys.exit(1)
            
            reviewer = GitHubPRReviewer(github_token)
            reviewer.review_pull_request(repo_owner, repo_name, pr_number)

        if __name__ == "__main__":
            main()
        EOF
    
    - name: Summary
      if: always()
      run: |
        echo "## AI Review Summary" >> $GITHUB_STEP_SUMMARY
        echo "- PR #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- Review completed at $(date)" >> $GITHUB_STEP_SUMMARY

        820E-7D18
